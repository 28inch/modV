<!doctype html>
<html lang="en">
<head>
	<meta charset="utf-8">
	<title>modV</title>
	<link rel="stylesheet" href="style.css">
</head>
	<body>
		<canvas></canvas>

		<script id="live-reload" src="http://localhost:35729/livereload.js"></script>
		<script src="./libraries/three.js"></script>
		<script src="./libraries/meyda.min.js"></script>
		<script src="./libraries/beatdetektor.js"></script>
		<script src="app.js"></script>

		<!-- modV modules load -->
		<!-- between these tags -->

		<script>
			var modVC = new modV({
				canvas: document.querySelector('canvas'),
				clearing: false,
				//remote: 'ws://localhost:8888/ws',
				previewWindow: false,
				retina: true
			});

			modVC.registerMod(demo);
			modVC.registerMod(slipNslide);
			modVC.registerMod(relapper);
			modVC.registerMod(gridStretch);
			modVC.registerMod(textMod);
			modVC.registerMod(textModPalette);
			modVC.registerMod(mirror);
			modVC.registerMod(waveform);
			modVC.registerMod(concentrics);
			// modVC.registerMod(squares);
			modVC.registerMod(xorcles);
			modVC.registerMod(stretch);
			modVC.registerMod(cacomixle);
			modVC.registerMod(moonLine);
			modVC.registerMod(tile);
			modVC.registerMod(pixelate);
			modVC.registerMod(rotate);
			modVC.registerMod(dither);
			modVC.registerMod(ball);
			modVC.registerMod(glitcher);
			modVC.registerMod(onOff);
			modVC.registerMod(starField);
			// modVC.registerMod(strobe);
			modVC.registerMod(badHold);
			modVC.registerMod(slide);
			modVC.registerMod(rotoZoom);
			modVC.registerMod(staticImage);
			modVC.registerMod(tenPrint);
			modVC.registerMod(webcam);
			modVC.registerMod(video);
			modVC.registerMod(circles);
			modVC.registerMod(spazulator5000);
			modVC.registerMod(perl);

			var myModule = new modVC.Module2D({
				info: {
					name: 'Default Module',
					author: '2xAA',
					version: 0.1,
					meyda: ['buffer'],
					controls: []
				},
				init: function() {
			 		
					this.hue = 0;

					// map() from Processing
					Math.map = function(value, low1, high1, low2, high2) {
						return low2 + (high2 - low2) * (value - low1) / (high1 - low1);
					};
					
				},
				draw: function(can, ctx, vid, features, meyda, delta, bpm) {
					if(this.hue > 360) this.hue=0;
					this.hue++;

					var ampArr = features.buffer;
					ampArr = meyda.windowing(ampArr, 'hanning');

					ctx.strokeStyle = 'hsl(' + this.hue + ', 100%, 50%)';
					ctx.beginPath();
					for (var i = 0; i < ampArr.length-1; i++) {
						var width = Math.round(Math.map(i, 0, ampArr.length-1, 0, can.width));
						var newWidth = Math.round(Math.map(i+1, 0, ampArr.length-1, 0, can.width));
						var y = can.height/2 - (can.height * ampArr[i]) / (2);
						y = Math.round(y);
						var yNext = can.height/2 - (can.height * ampArr[i+1]) / (2);
						yNext = Math.round(yNext);

						ctx.moveTo(width, y);
						ctx.lineTo(newWidth, yNext);
					}
					ctx.closePath();
					ctx.stroke();
					

				}
			});

			modVC.register(myModule);

			var myModuleShader = new modVC.ModuleShader({
				info: {
					name: 'Default Shader',
					author: '2xAA',
					version: 0.1,
					meyda: [], // returned variables passed to the shader individually as uniforms
					controls: [], // variabled passed to the shader individually as uniforms
					uniforms: {} // Three.JS uniforms
				},
				shaderFile: "/Default Shader/shader.html" // path to HTML file within modules directory with shader script tags
			});

			modVC.register(myModuleShader);

			modVC.start();
		</script>
	</body>
</html>